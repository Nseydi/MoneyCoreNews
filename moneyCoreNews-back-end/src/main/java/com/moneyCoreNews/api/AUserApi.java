/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.moneyCoreNews.api;

import com.moneyCoreNews.model.AUser;
import com.moneyCoreNews.model.AppRole;
import com.moneyCoreNews.model.ModelApiResponse;
import com.moneyCoreNews.util.InvalidFileException;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.util.List;

@Api(value = "user", description = "the user API")
public interface AUserApi {


    // ***********************************************************Create user
    @ApiOperation(value = "Create user", response = Void.class, tags = {"user",})

    @ApiResponses(value = {
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class)
        ,
			@ApiResponse(code = 200, message = "successful operation", response = AUser.class)
    })
    @RequestMapping(value = "/users", produces = {"application/xml", "application/json"}, method = RequestMethod.POST)
    ResponseEntity<AUser> createAUser(
            @ApiParam(value = "Created user object", required = true) @Valid @RequestBody AUser aUser,
            HttpServletRequest request, BindingResult result, Authentication authentication);

    // ***********************************************************add A Role ToUser
    @ApiOperation(value = "add a role to user", response = AppRole.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AppRole.class)})

    @RequestMapping(value = "/users/{userId}/addRole", produces = {"application/xml",
        "application/json"}, method = RequestMethod.PUT)
    ResponseEntity<AppRole> addRoleToUser(
            @ApiParam(value = "The id of the user", required = true) @PathVariable("userId") Long userId,
            @ApiParam(value = "Created user object", required = true) @Valid @RequestBody AppRole appRser,
            Authentication authentication);
    // ***********************************************************set UserRole

    @ApiOperation(value = "add a role to user", response = AppRole.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AppRole.class)})

    @RequestMapping(value = "/users/{userId}/setRole", produces = {"application/xml",
        "application/json"}, method = RequestMethod.PUT)
    ResponseEntity<AppRole> setUserRole(
            @ApiParam(value = "The id of the user", required = true) @PathVariable("userId") Long userId,
            @ApiParam(value = "Created user object", required = true) @Valid @RequestBody AppRole appURser,
            Authentication authentication);

    // ***********************************************************Delete A User
    @ApiOperation(value = "Delete user", notes = "This can only be done by the logged in user.", response = Void.class, tags = {
        "user",})
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Invalid email supplied", response = Void.class)
        ,
			@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/{id}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAUser(
            @ApiParam(value = "The name that needs to be deleted", required = true) @PathVariable("id") Long id,
            Authentication authentication);

    // ***********************************************************Delete A User
    @ApiOperation(value = "Delete user", notes = "This can only be done by the logged in user.", response = Void.class, tags = {
        "administration",})
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Invalid email supplied", response = Void.class)
        ,
			@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/unActivatedUser/{id}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUnactivatdUser(
            @ApiParam(value = "The name that needs to be deleted", required = true) @PathVariable("id") Long id,
            Authentication authentication);

    // ***********************************************************getAUserByName
    @ApiOperation(value = "Get user by user name", notes = "", response = AUser.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AUser.class)
        ,
			@ApiResponse(code = 400, message = "Invalid email supplied", response = Void.class)
        ,
			@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/{email}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<AUser> getAUserByName(
            @ApiParam(value = "The name that needs to be fetched. Use user1 for testing.", required = true)
            @PathVariable("email") String email);
    // ***********************************************************getAUserRoles

    @ApiOperation(value = "Get user by user name", notes = "", response = AppRole.class, responseContainer = "List", tags = {
        "user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AppRole.class, responseContainer = "List")
        ,
			@ApiResponse(code = 400, message = "Invalid email supplied", response = Void.class)
        ,
			@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/{email}/roles", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<AppRole>> getAUserRoles(
            @ApiParam(value = "The name that needs to be fetched. Use user1 for testing.", required = true)
            @PathVariable("email") String email);

    // ***********************************************************loginAUser
    @ApiOperation(value = "Logs user into the system", notes = "", response = String.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = String.class)
        ,
			@ApiResponse(code = 400, message = "Invalid email/password supplied", response = Void.class)})

    @RequestMapping(value = "/users/login", produces = {"application/xml",
        "application/json"}, method = RequestMethod.POST)
    ResponseEntity<String> loginAUser(
            @NotNull @ApiParam(value = "The user name for login", required = true)
            @RequestParam(value = "email", required = true) String email,
            @NotNull @ApiParam(value = "The password for login in clear text", required = true)
            @RequestParam(value = "password", required = true) String password);

    // ***********************************************************logoutAUser
    @ApiOperation(value = "Logs out current logged in user session", notes = "", response = Void.class, tags = {
        "user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/users/logout", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<Void> logoutAUser();

    // ***********************************************************updateAUser
    @ApiOperation(value = "Updated user", notes = "This can only be done by the logged in user.", response = Void.class, tags = {
        "user",})
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Invalid user supplied", response = Void.class)
        ,
			@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/updateUser/{Userid}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Void> updateAUser(
            @ApiParam(value = "name that need to be updated", required = true) @PathVariable("Userid") Long id,
            BindingResult result, @ApiParam(value = "Updated user object", required = true) @Valid @RequestBody AUser aUser,
            Authentication authentication);

    // ***********************************************************updateAUser
    @ApiOperation(value = "Updated user", notes = "This can only be done by the logged in user.", response = Void.class, tags = {
        "user",})
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Invalid user supplied", response = Void.class)
        ,
				@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/updateMyAccount", produces = {"application/xml",
        "application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Void> updateMyAccount(BindingResult result,
                                         @ApiParam(value = "Updated user object", required = true) @Valid @RequestBody AUser aUser,
                                         Authentication authentication);

    // ***********************************************************setNewPassword
    @ApiOperation(value = "set New Password", response = Void.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/users/resetConnected", produces = {"application/xml",
        "application/json"}, method = RequestMethod.POST)
    ResponseEntity<Void> connectedSetNewPassword(
            @NotNull @ApiParam(value = "The old password for login", required = true)
            @RequestParam(value = "oldPassword", required = true) String oldPassword,
            @NotNull @ApiParam(value = "The password for login in clear text", required = true)
            @RequestParam(value = "password", required = true) String password,
            Authentication authentication);

    // ***********************************************************confirm user
    @ApiOperation(value = "confirm user", response = Void.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/users/confirm/{token}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.POST)
    ResponseEntity<Void> confirmRegistration(
            @NotNull @ApiParam(value = "The token that is sent", required = true)
            @PathVariable(value = "token", required = true) String token,
            @NotNull @ApiParam(value = "The password for login in clear text", required = true)
            @RequestParam(value = "password", required = true) String password);

    // ***********************************************************processForgotPasswordForm
    @ApiOperation(value = "process ForgotPassword Form", response = Void.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/users/forgot", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<Void> processForgotPasswordForm(@RequestParam("email") String email, HttpServletRequest request);

    // ***********************************************************processForgotPasswordForm
    @ApiOperation(value = "process ForgotPassword Form", response = Void.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/users/spoofingAlert", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<Void> spoofingAttemptHandle(@RequestParam("email") String email, HttpServletRequest request);

    // ***********************************************************setNewPassword
    @ApiOperation(value = "set New Password", response = Void.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/users/enableAccount/{token}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.POST)
    ResponseEntity<Void> enableAccount(
            @NotNull @ApiParam(value = "The token that is sent", required = true)
            @PathVariable(value = "token", required = true) String token);

    // ***********************************************************setNewPassword
    @ApiOperation(value = "set New Password", response = Void.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/users/reset/{token}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.POST)
    ResponseEntity<Void> setNewPassword(
            @NotNull @ApiParam(value = "The token that is sent", required = true)
            @PathVariable(value = "token", required = true) String token,
            @NotNull @ApiParam(value = "The password for login in clear text", required = true)
            @RequestParam(value = "password", required = true) String password);

    // ***********************************************************getAUserByToken
    @ApiOperation(value = "Get user by user token", notes = "", response = AUser.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AUser.class)
        ,
			@ApiResponse(code = 400, message = "Invalid email supplied", response = Void.class)
        ,
			@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/byToken/{token}", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<AUser> getAUserByToken(
            @ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ", required = true)
            @PathVariable("token") String token);

    // ***********************************************************findAllUsers
    @ApiOperation(value = "Finds all users  ", notes = " ", response = AUser.class, responseContainer = "List", tags = {
        "administration",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AUser.class, responseContainer = "List")
        ,
			@ApiResponse(code = 400, message = "Invalid status value", response = Void.class)})

    @RequestMapping(value = "/users/all", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<AUser>> findAllUsers();

    // ***********************************************************findAllManagers
    @ApiOperation(value = "Finds All Managers  ", notes = " ", response = AUser.class, responseContainer = "List", tags = {
        "administration",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AUser.class, responseContainer = "List")
        ,
				@ApiResponse(code = 400, message = "Invalid status value", response = Void.class)})

    @RequestMapping(value = "/users/all-Managers", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<AUser>> findAllManagers();
    // ***********************************************************findUnActivatedAccounts

    @ApiOperation(value = "Finds all users  ", notes = " ", response = AUser.class, responseContainer = "List", tags = {
        "administration",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AUser.class, responseContainer = "List")
        ,
			@ApiResponse(code = 400, message = "Invalid status value", response = Void.class)})

    @RequestMapping(value = "/users/unActivatedAccounts", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<AUser>> findUnActivatedAccounts();

    // ***********************************************************getConnectedUser
    @ApiOperation(value = "Get ConnectedUser", notes = "", response = AUser.class, tags = {"user",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AUser.class)
        ,
			@ApiResponse(code = 400, message = "Invalid email supplied", response = Void.class)
        ,
			@ApiResponse(code = 404, message = "AUser not found", response = Void.class)})

    @RequestMapping(value = "/users/connectedUser", produces = {"application/xml",
        "application/json"}, method = RequestMethod.GET)
    ResponseEntity<AUser> getConnectedUser(Authentication authentication);

    //**********************************************************uploadFile/Image
    @ApiOperation(value = "uploads an image", notes = "", response = ModelApiResponse.class, tags = {
            "user",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class)})

    @RequestMapping(value = "/users/uploadImage", produces = {"application/json"}, consumes = {
            "multipart/form-data"}, method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> uploadImage(
            @ApiParam(value = "Additional data to pass to server")
            @RequestPart(value = "additionalMetadata", required = false) String additionalMetadata,
            @ApiParam(value = "file detail") @RequestPart("file") MultipartFile file, final HttpServletRequest request,
            Authentication authentication) throws IllegalStateException, IOException, ServletException, InvalidFileException;



    //********************************************************** downloadFile
    @ApiOperation(value = "Find candidate by ID", notes = "Returns a single candidate", response = Void.class, tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Void.class)
            ,
            @ApiResponse(code = 400, message = "Invalid ID supplied")
            ,
            @ApiResponse(code = 404, message = "candidate not found")})

    @RequestMapping(value = "users/{idUser}/downloadPhoto", produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    void downloadPhoto(HttpServletResponse response, @ApiParam(value = "ID of photo to return", required = true)
    @PathVariable("idUser") Long idUser) throws IOException;

    @GetMapping("users/getActivationLink/")
    ResponseEntity<String> getActivationLink(@RequestParam String email) throws Exception;

    @GetMapping("users/isEmailExist/")
    ResponseEntity<Boolean> isEmailExist(@RequestParam String email) throws Exception;
    
    @GetMapping("users/isUsernameExist/")
    ResponseEntity<Boolean> isUsernameExist(@RequestParam String username) throws Exception;
}
